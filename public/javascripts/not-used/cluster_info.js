String.prototype.HCwrapWith = function(tag, attrs) {
	var strAttrs = '';
	if (attrs != undefined) {
		for (var key in attrs) {
			strAttrs += ' ' + key + '="' + attrs[key] + '"';
		}
	}

	return '<' + tag + strAttrs + '>' + this + '</' + tag + '>';
};
function fetchExperimentResultOf_(expid, callback) {
	$.ajax({
		type: 'POST',
		url: '/expResult',
		data: {"expId":expid},
		success: callback, // function( data, textStatus, jqXHR )
		error: function( jqXHR, textStatus, errorThrown ) {
			alert(textStatus + errorThrown);
		}
	});
	
	/*** Debug Version ***/
	// var data = {'expId':'20130915001', 'type':'cluster', 'description':'This is the first expriment that has been recorded',
	// 'clusteredIds':{0:[8712833, 8712837, 8710896, 8722888, 8717035, 8648080, 8631739, 8646417, 8645261, 8645463, 8640105, 8698813, 8642991, 8699703, 8709640, 8667500, 8705029, 985428, 8640111, 8724048, 8720342, 8727805, 8727806, 8700898, 8700896, 8658384, 8661365, 8645452, 8663069, 8698805, 8698802, 8698809, 8658803, 8661744, 8663859, 8667512, 8674946, 8663213, 8733500, 8663067, 8654727, 8719300, 8719306, 8719308, 8663215, 8697722, 8697724, 8734121, 8640878, 8640871, 8640875, 8645444, 8719318, 8695003, 8675308, 8679186, 8658554, 8704958, 8717188, 8722982, 8664220, 8640848, 8675282, 8675287, 8636116, 8709639, 8705011, 8725457, 8661361, 8631737, 8661366, 8661360, 8726649, 8640852, 8656198, 8701305, 8698797, 8713610, 8674977, 8657119, 8695021, 8658360, 8633984, 8642979, 8642974, 8675291, 8675294, 8656148, 8674953, 8638378, 8674988, 8674986, 8661369, 8713734, 8700227, 986430, 8719294, 8701243, 8656209, 8656206, 8698811, 8664218, 8658789, 8699651, 8663864, 8713632, 8657078, 986429, 986428, 8719283, 8642976, 8667488, 8698688, 8656809, 8727186, 8658814, 8668260, 8668265, 8701221, 8654720, 8645459, 8663002, 8663000, 8716541, 8716547, 8666332, 8666330, 986412, 8713401, 8645280, 8645286, 8734137, 8697221, 8640896, 8640890, 8713399, 8713456, 8633991, 8668271, 8633867, 8666328, 8716575, 8700902, 8700900, 8658326, 8719268, 8717407, 8717409, 8701431, 8634407, 8699685, 8661618, 8697922, 8716589, 8663070, 8658337, 8645462, 8712331, 8649089, 8631741, 8640901, 8719311, 8709647, 8709642, 8709648, 8674983, 8633888, 8631740, 986426, 8733441, 8725448, 8734142, 8662097, 8712328, 8697797, 8732426, 8645451, 8645673, 8640912, 8640911, 8675300, 8664776, 8681700, 8675277, 8675272, 8675270, 8661703, 8717830, 8712319, 8675297, 8696018, 8640904, 8722894, 8666376, 8712818, 8728129, 8728128, 8674966, 8713407, 8717827, 8734125, 8640865, 8724021, 8719276, 8725463, 8666374],
	// 				1:[8684274, 8698528, 8681895, 8722712, 8723821, 8723826, 8641322, 8676530, 8733520, 8712376, 8640030, 8683107, 8678680, 8689258, 8679026, 8722695, 8722692, 8663323, 8723832, 8700894, 8700890, 8674666, 8689882, 8659889, 8689887, 8666351, 8712367, 8683114, 8649185, 8729971, 8722685, 8684248, 8684247, 8684243, 8675312, 8684264, 8687682, 8687684, 8687688, 8649255, 8675146, 8700884, 8649409, 8681573, 8730458, 8684666, 8666342, 8712353, 8712358, 8712724, 8640835, 8689875, 8685032, 8698490, 8646932, 8684250, 8684253, 8688589, 8727799, 8727798, 8686227, 8649246, 8684675, 8695399, 8712341, 8712348, 8689866, 8686232, 8686341, 8640829, 8642912, 8729956, 8734071, 8700546, 8688801, 8689262, 8705128, 8646928, 8646929, 8646927, 8684266, 8727782, 8727780, 8649279, 8712404, 8684683, 8734533, 8695386, 8691331, 8689857, 8683099, 8683144, 8733569, 8691335, 8684284, 8698458, 8712407, 8734067, 8649263, 8687657, 8649462, 8698496, 8640826, 8684695, 8735776, 8695374, 8688664, 8683152, 8683157, 8640041, 8695408, 8689338, 8689332, 8675293, 8657248, 8695389, 8678677, 8678679, 8734064, 8684731, 8712392, 8698691, 8638383, 8684986, 8698477, 8679040, 8687631, 8712727, 8649446, 8684908, 8712381, 8684724, 8645120, 8676524, 8687693, 8695358, 8698467, 8733458, 8649491, 8696013, 8687625, 8676470, 8723809, 8649135, 8683615, 8649438, 8691317, 8695413, 8733072, 8645131, 8684703, 8703987, 8650401, 8705516, 8731755, 8698526, 8698524, 8698521, 8698520, 8650456, 8727775, 8730023, 8666224, 8650412, 8683284, 8695424, 8705503, 8712451, 8712459, 8730035, 8687647, 8666234, 8676522, 8676528, 8691334, 8695437, 8695435, 8690896, 8712443, 8649456, 8682033, 8666344, 8682039, 8700888, 8681607, 8698508, 8684651, 8682036, 8682038, 8684743, 8683119, 8684989, 8646924, 8695369, 8646925, 8690894, 8646926, 8676532, 8676535, 8691323, 8691321, 8642863, 8679005, 8735784, 8698407, 8698518, 8698512, 8685080, 8675304, 8684268, 8689897, 8684262, 8684756, 8727788, 8712433, 8679031, 8674658, 8649176, 8684621, 8684628, 8676502, 8650459, 8732189, 8679000, 8696014, 8696017, 8696016, 8642870, 8642877, 8642875, 8649192, 8730407, 8676526, 8722708, 8722705, 8722702, 8727777, 8699908, 8722677, 8722680, 8703041, 8731799, 8684292, 8735780, 8691343, 8712336, 8730461, 8730460, 8676519, 8734544, 8676512, 8731751, 8712354, 8733460, 8733081, 8684276, 8650476],
	// 				2:[8712490, 8712499, 8712542, 8703035, 993672, 993676, 993674, 8689827, 8701237, 8710959, 8702527, 8710953, 8710956, 8632467, 8712571, 995439, 8689832, 993669, 8689835, 8632473, 8690913, 8632416, 8668370, 8712547, 8712569, 8712561, 8712549, 991895, 991896, 8702641, 8712613, 8712685, 8695076, 8695078, 8705133, 8705139, 995468, 8712518, 8712511, 8712515, 995486, 8712691, 8712696, 8701189, 8732264, 8732555, 991072, 991070, 991071, 8632431, 8689822, 8732564, 8702594, 8701488, 8697415, 8697419, 991069, 991066, 8712608, 8712534, 8703088, 8705137, 8668234, 8705130, 8702704, 8702568, 8689846, 8689842, 8689843, 8689849, 8701188, 8701497, 8732442, 8732449, 8668334, 8699089, 995436, 8702581, 8702711, 8689836, 8689834, 8689839, 8632397, 8632392, 8701141, 8701146, 8702538, 8712465, 8702709, 8732257, 8703045, 8689824, 8689823, 8689828, 8689829, 8732277, 8716955, 8732436, 8732462, 8732465, 8732439, 995449, 8712531, 8690912, 995432, 8689811, 989933, 995495, 995490, 8701518, 8701511, 8701510, 995475, 8701530, 8701533, 8701529, 8705421, 8712701, 8702559, 8701233, 8689809, 8689805, 8712486, 8695083, 8695081, 8695086, 995481, 995487, 995485, 995484, 8732270, 8697406, 8732269, 995463, 8705431, 8712605, 8712506, 8640148, 8701534, 8732273, 995457, 8712591, 8712594, 8704937, 8701513, 8732518, 8702612, 8691437, 8701523, 8701525, 8701528, 995445, 995443, 8701503, 8658208, 8668396, 8701067, 996488, 996489, 8712627, 8702517, 8702515, 995483, 8668325, 8689848, 8732431, 8732437, 995431, 8712616, 8703096, 8705427, 8712481, 8712553, 8703027, 8685989, 996491, 996490, 996492, 8703094, 8701191, 8668461, 8712500],
	// 				3:[8692822, 8645723, 8728133, 8688602, 8688593, 8662027, 8692816, 8692792, 8690986, 8688597, 8688595, 8690998, 8691397, 8691007, 8692321, 8693399, 8691026, 8692769, 8717137, 8692774, 8692776, 8688428, 8688427, 8685108, 8691406, 8692794, 8688429, 8688424, 8692786, 8691401, 8647005, 8685143, 8688438, 8688436, 8688437, 8688430, 8688431, 8688432, 8688433, 8692790, 8691046, 8688435, 8692810, 8688434, 8685155, 8685165, 8691341],
	// 				4:[8697685, 8645606, 8710960, 8675212, 8675218, 8701280, 8674927, 8656076, 8675215, 8716070, 8676295, 8677764, 8692475, 8674913, 8697757, 8697746, 8665105, 8717871, 8710951, 8678978, 8701294, 8701290, 8709660, 8680119, 8735817, 8688613, 8719209, 8692467, 8664869, 8735876, 8665113, 8665111, 8678965, 8701286, 8735804, 8727817, 8717904, 8716543, 8649385, 8723750, 8683304, 8656774, 8710938, 8712421, 8702749, 8734507, 8727839, 8645495, 8676283, 8697666, 8633816, 8734475, 8702752, 8733255, 8726821, 8636822, 8645484, 8701551, 8665098, 8697701, 8726873, 8726871, 8722786, 8710915, 8633821, 8663828, 8717063, 8663821, 8711223, 8691142, 8713728, 8713726, 8724034, 8686329, 8680201, 8680200, 8690924, 8697693, 8719198, 8684993, 8685005, 8717128, 8719186, 8717126, 8699244, 8696132, 8691194, 8711278, 8701327, 8659797, 8663334, 8663329, 8656025, 8734472, 8677463, 8692401, 8678974, 8734508, 8658792, 8699319, 8699313, 8656769, 8678959, 8653315, 8719240, 8688680, 8697906, 8735882, 8687577, 8663948, 8676301, 8732185, 8709979, 8640941, 8663878, 8653312, 8701347, 8713711, 8725398, 8680245, 8653305, 8691095, 8730628, 8649384, 8649386, 8696130, 8716546, 8709695, 8678950, 8656071, 8701279, 8687773, 8712410, 8724015, 8677416, 8730636, 8695099, 8655917, 8649399, 8657037, 8701278, 8703869, 8658523, 8732278, 8683264, 8687784, 8717508, 8717506, 8681683, 8696184, 8709644, 8699320, 8684605, 8693876, 8717999, 8703875, 8699237, 8656054, 8656055, 8684737, 8695134, 8723849, 8691138, 8733277, 8714721, 8695324, 8658521, 8702746, 8663763, 8680156, 8697765, 8675197, 8640029, 8675209, 8674918, 8717467, 8684749, 8688678, 8702909, 8697781, 8646405, 8733266, 8725532, 8692808, 8695338, 8726986, 8719174],
	// 				5:[697682, 8698990, 8683353, 8664992, 8664997, 8653264, 8725504, 8691202, 8681693, 8631733, 8725479, 8668674, 8668577, 8664986, 8664984, 8664980, 8723856, 8646778, 8685236, 8646796, 8641049, 8654576, 8683370, 8683200, 8723216, 8645226, 8628720, 8692730, 8697643, 8661467, 8646785, 8653285, 8653282, 8683309, 8683303, 8683307, 8655945, 8656086, 8656082, 8656088, 8697655, 8697651, 8684320, 8684321, 8657170, 8716209, 8653296, 8641001, 8637120, 8732177, 8683314, 8683316, 8683317, 8664874, 8697710, 8697719, 8665056, 8685240, 8684316, 8661768, 8631185, 8699669, 8668791, 8657165, 8657168, 8657169, 8655944, 8674634, 8674637, 8653135, 8666255, 8666383, 8683320, 8683322, 8684306, 8684304, 8684872, 8727062, 8664897, 8691200, 8695015, 8697696, 8693846, 8640993, 8645619, 8645585, 8697609, 8661540, 8684843, 8661546, 8727071, 8687607, 8645607, 8713732, 8695032, 8695037, 8690026, 8683526, 8645570, 8645604, 8640989, 8645595, 8645592, 8664925, 8656108, 8661438, 8699656, 8661484, 8655935, 8674772, 8725574, 8691055, 8691057, 8683623, 8683534, 8683535, 8650540, 8650542, 8650548, 8664917, 8645616, 8668687, 8640952, 8727058, 8637173, 8668828, 8668462, 8668468, 8668666, 8668662, 8653290, 8653293, 8661700, 8683123, 8691422, 8668466, 8637286, 8653295, 8683295, 8683293, 8683507, 8683276, 8645620, 8664905, 8668669, 8650555, 8697635, 8701282, 8723724, 8683288, 8687616, 8668476, 8668676, 8668672, 8716571, 8653541, 8688616, 8653304, 8653300, 8683311, 8637296, 8637291, 8691418, 8691413, 8653287, 8645579, 8640372, 8637194, 8697726, 8640976, 8690206, 8712603, 8690062, 8691421, 8691423, 8681686, 8674784, 8668612, 8668613, 8683385, 8650535, 8661477, 8637187, 8683321, 8658279, 8640960, 8656115, 8656116, 8656112, 8656119, 8655925, 8657049, 8657042, 8683508, 8691430, 8681697, 8645622, 8683390, 8637133, 8691197, 8637178, 8641055, 8650559, 8650556, 8668826, 8668821, 8653291, 8668624, 8727060, 8661818, 8661817, 8683278, 8668699, 8683297, 8695040, 8690278, 8668638, 8646718, 8640025, 8694083, 8674640, 8725554, 8691500, 890495, 8640026, 8640024, 8640023, 8645576],
	// 				6:[8697663, 8664478, 8699676, 8675230, 8668604, 8668607, 8712682, 8701288, 8724058, 8657099, 8699690, 8666100, 8645469, 8697699, 8675248, 8650714, 8704974, 8646772, 8701295, 8675223, 8725431, 8663266, 8735825, 8695116, 8695112, 8725415, 8649402, 8714750, 8697733, 8664469, 8668756, 8650941, 8684330, 8675238, 8649335, 8649337, 8702739, 8645209, 8714696, 8640122, 8640124, 8640125, 8650642, 8668764, 8726968, 8686391, 8697720, 8668748, 8659839, 8704997, 8723147, 8720148, 8649300, 8734503, 8658230, 8716560, 8733286, 8664406, 8723766, 986423, 8656826, 8699661, 8716210, 8716212, 8657163, 8700206, 8700188, 8713918, 8668767, 8633827, 8723760, 8699675, 8657028, 8727846, 8657117, 8631437, 8656796, 8697690, 8697460, 8691145, 8645612, 8645610, 8661408, 8713825, 8659847, 8723754, 8727899, 8681684, 8681685, 8717947, 8716095, 8691199, 8648131, 8716211, 8651884, 8717520, 8697786, 8650770, 8650777, 8732527, 8648085, 8698904, 8657026, 8698879, 8717134, 8659811, 8656770, 8692405, 8714733, 8664911, 8716613, 8661525, 8664771, 8658799, 8645589, 8645588, 8632495, 8640136, 8654762, 8655928, 8696187, 8666323, 8633856, 8656315, 8666325, 8656792, 8656791, 8633862, 8653298, 8675243, 8668782, 986418, 8733282, 8661502, 8698886, 8698882, 8663290, 8727897, 8723880, 8649411, 8668646, 986415, 8675254, 8675257, 8675252, 8695122, 8723865, 8691427, 8691428, 8666096, 8703861, 8668773, 8668810, 8668816, 8718013, 8640968, 8649407, 8649405, 8668657, 8699694, 8675261, 8675266, 8687582, 8693870, 8714725, 8725446, 8631753, 8701351, 8656057, 8648180, 8636826, 8651857, 8681698, 8693843, 8686445, 8651877, 8697715, 8636832, 8723877, 8717552, 8640828, 8697354, 8631177, 8658529, 8687586, 8651843, 8645473, 8664769, 8664765, 8640113, 8645477, 8640114, 8656091, 8664763],
	// 				7:[8712838, 8640984, 8637157, 8650700, 8647588, 8656000, 8634024, 8704963, 8699713, 8723917, 8655947, 8687611, 8657094, 8645695, 8637350, 8653248, 8666298, 8637331, 8645516, 8655019, 8726999, 8640100, 8637149, 8701526, 8665032, 8665036, 8653252, 8653265, 8697744, 8697745, 8634016, 8664999, 8694986, 8684344, 8668294, 8657155, 8650650, 8725664, 8695048, 8690213, 8637323, 8637324, 8658258, 8645521, 8645523, 8716598, 8637217, 8712819, 8628861, 8650655, 8723969, 8657200, 8637301, 8684358, 8634002, 8722993, 8666336, 8635198, 8674941, 8701334, 8701339, 8701361, 8674722, 8641012, 8689873, 8666380, 8645443, 8645440, 8650644, 8645536, 8698701, 8692141, 8692147, 8640277, 8661362, 8661364, 8685258, 8656131, 8646936, 8648867, 8723923, 8635187, 8668562, 8701329, 8691498, 8649306, 8691168, 8653272, 8695007, 8695005, 8666334, 8629728, 8664975, 8666382, 8665041, 8683406, 8683403, 8692150, 8692151, 8692154, 8725577, 8681704, 8723794, 8693401, 8693403, 8723005, 8723776, 8699665, 8701311, 8674892, 8674895, 8657162, 8674639, 8674701, 8683549, 8683548, 8683541, 8683544, 8683546, 8640073, 8645554, 8640076, 8674651, 8664785, 8683325, 8727001, 8692169, 8668302, 8723782, 8697928, 8727067, 8723010, 8632511, 8655964, 8631431, 8674714, 8719992, 8645460, 8695024, 8666313, 8691525, 8691526, 8683539, 8712820, 8645630, 8632498, 8665063, 8665060, 8683553, 8640992, 8640991, 8640997, 8697236, 8692170, 8664757, 8657108, 8666311, 8723997, 8691522, 8691519, 8698686, 8637250, 8640982, 8640988, 8653601, 8723912, 8692183, 8722969, 8722960, 8722962, 8634010, 8695088, 8723744, 8697924, 8675350, 8726980, 8635154, 8725579, 8691503, 8638471, 8656137, 8655963, 8629782, 8683552, 8645631, 8645633, 8664780, 8645637, 8645565, 8640088, 8645567, 8687590, 8698911, 8698684, 8692192, 8658795, 8698638, 8658798, 8723732, 8668591, 8675346, 8701353, 8701223, 8668298, 8668493, 8684407, 8684400, 8699139, 8656124, 8720336, 8674741, 8691069, 8723908, 8695009, 8665070, 8723920, 8689865, 8684428, 8645627, 8729903, 8692216, 8657125, 8681711, 8692173, 8668583, 8727083, 8701345, 8684410, 8657060, 8665048, 8661559, 8674682, 8664978, 8637347, 8683514, 8664973, 8664971, 8637196, 8692200, 8637197, 8726978, 8683401, 8694964, 8723888, 8687602, 8684392, 8668485, 8697926, 8666339, 8695092, 8726976, 8645519, 8701531, 8656100, 8662082, 8645640, 8645642, 8664969, 8698652, 8695067, 8645529, 8634478, 8645445, 8645568, 8709646, 8684380, 8725516, 8657199, 8657198, 8657197, 8629880, 8724002, 890501, 8664787, 8645629, 8697792, 8717511, 8657152, 8640283, 8723892, 8695042, 8629836, 8656123, 8699746, 8684386, 8723114, 8637220, 8723111, 8656227, 8703019, 8668533, 8645550, 8631174, 8703016, 8661816, 8655966, 8657055, 8653225, 8662085, 8677410, 8645354, 8725450, 8665058, 8637319, 8720732, 8666384, 8697736, 8637226, 8637223, 8723889, 8664831, 8645542, 8681710, 8681718, 8699762, 8723107, 8655973, 8703021, 8655955, 8655957, 8655951, 8655959, 8681714, 8657081, 8725438, 8724006, 8664761, 8681715, 8695247, 8666378, 8640280, 8637232, 8695267],
	// 				8:[8664846, 8676348, 8640241, 8709650, 8640248, 8705386, 8664443, 8710899, 8702491, 8684824, 8723132, 8674924, 8658561, 8663278, 8697989, 8730676, 8730474, 8730475, 8725184, 8641326, 8725180, 8725181, 8703012, 8640037, 8640033, 8662116, 8645467, 8664853, 8664858, 8735778, 8732344, 8697741, 8665103, 8664188, 8705118, 8705116, 8668345, 8684830, 8723123, 8720345, 8649223, 8700892, 8674662, 8674669, 8676280, 8663071, 8705048, 8702835, 8711319, 8702831, 8649037, 8711315, 8732202, 8642861, 8679045, 8668759, 8667475, 8709299, 8705038, 8661962, 8719893, 8719892, 8719890, 8702827, 8702825, 8702829, 8675302, 8668769, 8683300, 8702812, 8667732, 8684920, 8722458, 8721222, 8668411, 8668419, 8661979, 8661971, 8641316, 8695001, 8679185, 8703985, 8683318, 8683312, 8645497, 8664408, 8710922, 8705126, 8668790, 8701317, 8677241, 8661702, 8702759, 8719327, 8649005, 8725327, 8636820, 8666321, 8711182, 8631735, 8721208, 8656278, 8695361, 8683326, 8683323, 8710914, 8710912, 8713614, 8701308, 8713613, 8661799, 8730409, 8711196, 8677448, 8721217, 8721212, 8649108, 8702782, 8701544, 8701547, 8695350, 8675326, 8683333, 8683339, 8705490, 8710907, 8710904, 8668338, 8664759, 8709813, 8709819, 8723681, 8675362, 8720311, 8689844, 8666316, 8702775, 8734062, 8734060, 8677446, 8676455, 8649114, 8702795, 8702790, 8702798, 8718810, 8683086, 8710917, 8638371, 8729929, 8732196, 8695347, 8640239, 8667471, 8687678, 8705044, 8684855, 8685074, 8667275, 8667276, 8667470, 8666300, 8667478, 8710911, 8703023, 8695355, 8712096, 8703047, 8677512, 8676446, 8677461, 8677240, 8666206, 8649123, 8731809, 8684880, 8726619, 8695376, 8702638, 8722809, 8667480, 8636643, 8666318, 8722978, 8705050, 8667465, 8667467, 8733457, 8733455, 8681583, 8712718, 8712714, 8724436, 8712892, 8658614, 8677508, 8674934, 8666185, 8705457, 8713612, 8636644, 8695366, 8661973, 8683574, 8656764, 8686026, 8721233, 8685051, 8664760, 8711208, 8725173, 8677503, 8676269, 8662403, 8676467, 8711248, 8666221, 8711241, 8649098, 8695317, 8636345, 8677431, 8638377, 8729953, 8705509, 8663076, 8663073, 8699755, 8679043, 8634406, 8650880, 8700912, 8700914, 8700916, 8711189, 8649153, 8702991, 8634405, 8687640, 8636119, 8711233, 8666230, 8726625, 8654741, 8662080, 8712333, 8683490, 8649083, 8676465, 8681681, 8682035, 8685066, 8705121, 8710926, 8656062, 8675310, 8675313, 8678678, 8723678, 8711297, 8667474, 8649093, 8702770, 8720387, 8730645, 8710057, 8711228, 8703675, 985427, 8675315, 8667730, 8667731, 8705522, 8696111, 8677520, 8675305, 8726623, 8702766, 8674906, 8666304, 8726621, 8726626, 8705396, 8711245, 8730656, 8734313, 8676500, 8674893, 8718664, 8656067, 8636369, 8636328, 8665127, 8728130, 8666271, 8662040, 8676494, 8656281, 8656283, 8656288, 8709668, 8675208, 8661710, 8674912, 8711024, 8722682, 8685058, 8676350, 8676514, 8734307, 8684894, 8709295],
	// 				9:[8633987, 8697755, 8718791, 8709676, 8699806, 8709674, 8699804, 8681728, 8709703, 8685998, 8685991, 8725475, 8712377, 8677760, 8683585, 8683584, 8683588, 8701447, 8726997, 8701449, 8678689, 8646398, 989927, 8697748, 8699819, 8699811, 8646381, 8697359, 8656745, 8655990, 8691183, 8725402, 8721363, 8695065, 8683592, 8683593, 8683597, 8683595, 8683599, 8661804, 8635254, 8701558, 8694996, 8638467, 8684484, 8725412, 8684466, 8691177, 8684462, 8677812, 8712356, 8712351, 8695073, 8718928, 8695251, 8692144, 8709713, 8656080, 8727003, 8638453, 8667529, 8699836, 8657179, 8657178, 8632529, 8684496, 8657174, 8635219, 8697245, 8712425, 8655994, 8712393, 8653479, 8725427, 8725421, 8701581, 8701587, 8726984, 8705170, 8664792, 8664798, 8712385, 991073, 8635231, 8718669, 8718668, 8638444, 8726965, 8699846, 8635228, 8655981, 8635221, 8634013, 8697259, 8684443, 8684449, 8645302, 8661367, 8666195, 8645316, 8645314, 8729944, 8685970, 8701391, 8657180, 8657182, 8635156, 8638432, 8638436, 8638434, 8684874, 8684877, 8635234, 8645510, 8635238, 8709697, 8697281, 8684495, 8677444, 8729935, 8683556, 8634022, 8709691, 8638424, 8701440, 8635240, 8723757, 8720315, 8655979, 8726932, 8681723, 8725695, 8723994, 8723990, 8697290, 8691191, 8691192, 8658202, 8700906, 8712399, 8697324, 8679305, 8723972, 8661807, 8646384, 8661814, 8729923, 8686009, 8666541, 8638416, 8638412, 8635250, 8635252, 8634018, 8674742, 8712462, 8635248, 8726982, 8697788, 8684506, 8684502, 8723981, 8684431, 8684434, 8684435, 8681720, 8656803, 8637389, 8691185, 8691506, 8666197, 8646402, 8721272, 8677643, 8729915, 8684886, 8695070, 8701560, 8729912, 8684475, 8638406, 8666319, 8684889, 8712477, 8699793, 8658172, 8703058, 8681743, 8646752, 8646587, 8645356, 8638399, 8701426, 8701535, 8631179, 8664802, 8709685, 8701446, 8712440, 8712449, 8638423, 8701184, 8709665, 8646394, 8703060, 8703068, 8645304, 8725395, 8634033, 8700908, 8700904, 8701448, 8635246, 8712455, 8635242, 8656074, 8726966, 8681722, 8681726, 8681725, 8646382, 8646389, 8656105, 8700910, 8650959, 8709670, 8653377, 8701375, 8721368, 8695090, 8692233, 8726937, 8712338, 8645649, 8645645, 8645646, 8646379, 8701401, 8701400, 8701403, 8701405, 989896, 989892, 8664813, 8683598, 8635236, 8681738, 8726962, 8681730, 8681731, 8655978, 8655977, 8726964, 8642999, 8637366, 8637364, 8637362, 8642996, 8712325, 8712320, 8646380, 8655967, 8701411, 8693400, 8648864, 8709720, 8658205, 8723898, 8634046, 8701398, 8701395, 8646726, 8691514, 8697305, 8632459, 8691513, 8723894, 8701226, 8703064, 8702512, 8691511, 8681734, 8635224, 8661813, 8661811, 8661810, 8667386, 8645435, 8720395, 8655817, 8645434, 8712310, 8677741, 8637352, 8701462, 8681736, 8697761, 8701384, 8699826, 8701389, 8705174, 8705177, 8709719, 8697378, 8656961, 8645507, 8645506, 8646371, 8646374, 8697383, 8661809, 8660407, 8661802, 8661805, 8661806, 8697783, 8703052, 8725467, 8691510, 8632464, 8726967, 8723976, 8726985, 8657051, 8712445, 8701472, 8701475, 8702927, 8635226]},
	// 'clusterInfo': {0:{'Unique Prog Names':["楚汉传奇", "玉观音", "心路GPS[粤]", "隋唐英雄下部", "乡村爱情变奏曲", "代号十三钗", "石榴红了", "神秘博士第二季[英]", "爱情自有天意new", "独生子女的婆婆妈妈", "恋爱季节[粤]", "小儿难养", "错嫁", "扇娘", "凤凰牡丹", "双人房单人床", "天真遇到现实", "石榴红了new", "迷离档案[粤]", "太空堡垒卡拉狄加第四季[英]", "利箭行动", "漂亮主妇new", "诉讼双雄第一季[英]", "美丽在望", "法网狙击[粤]", "恋爱季节", "隋唐英雄", "宝贝战争", "倾城绝恋new", "爱情自有天意", "你睡觉的时候[韩]", "闯关东Ⅱnew", "新红楼梦", "少林寺传奇3", "法网狙击", "凤凰牡丹new", "心路GPS", "初五启市录", "劝和小组", "嫁入豪门", "恋爱季节new[粤]"]},
	// 				1:{'Unique Prog Names':["终极一班II", "楚汉传奇", "我们的快乐人生new", "我的极品老妈", "乡村爱情变奏曲", "石榴红了", "致命名单", "幸福摩天轮[粤]", "独生子女的婆婆妈妈", "扇娘", "老表，你好野！[粤]", "凤凰牡丹", "漂亮主妇new", "利箭行动", "法网狙击[粤]", "隋唐英雄", "老表，你好野！", "爱情自有天意", "你睡觉的时候[韩]", "法网狙击", "爱回家第十部", "爱回家第九部", "初五启市录[粤]", "嫁入豪门"]},
	// 				2:{'Unique Prog Names':["太空堡垒卡拉狄加第四季[英]", "追击者[韩]", "家有仙妻", "闯关东Ⅱnew", "新红楼梦", "楚汉传奇new", "想你[韩]", "隋唐英雄下部", "少林寺传奇3", "闯关东IInewnew", "宝贝战争", "幽灵[韩]", "神秘博士第二季[英]", "要帅气的生活[韩]"]},
	// 				3:{'Unique Prog Names':["爱情自有天意", "刷新3+7卫视版", "恋爱季节[粤]", "楚汉传奇", "闯关东中篇", "隋唐英雄new2"]},
	// 				4:{'Unique Prog Names':["终极一班II", "樱野3加1", "老表，你好野！[粤]", "我们的快乐人生new", "心路GPS[粤]", "隋唐英雄下部", "代号十三钗", "只有你[韩]", "平原烽火", "幸福摩天轮[粤]", "致命名单", "恋爱季节[粤]", "天子寻龙", "拿什么拯救你我的爱人", "新四大名捕", "一米阳光", "心路GPS", "爱回家第十一部", "爱在日落之前", "射向星星", "玉观音", "我的极品老妈", "美丽在望", "法网狙击[粤]", "刀马旦95版", "诛寇行动", "神秘博士第三季[英]", "恋爱季节", "隋唐英雄", "宝贝战争", "老表，你好野！", "倾城绝恋new", "要帅气的生活[韩]", "范府大院", "你睡觉的时候[韩]", "法网狙击", "幸福摩天轮", "爱回家第十部", "爱回家第九部", "初五启市录", "初五启市录[粤]", "嫁入豪门", "无赖汉[韩]"]},
	// 				5:{'Unique Prog Names':["福气又安康", "非常24小时", "终极一班II", "平原烽火", "太空堡垒卡拉狄加第四季[英]", "老表，你好野！[粤]", "玉观音", "我的极品老妈", "隋唐英雄下部", "石榴红了", "致命名单", "樱野3加1", "幸运草[韩]", "只有你[韩]", "蝾螈道士和影子操作团[韩]", "江湖兄弟", "天子寻龙", "我家的天使", "拿什么拯救你我的爱人", "新四大名捕", "再回首new", "楚汉传奇", "一米阳光", "迷离档案[粤]", "智勇新警界", "射向星星", "利箭行动", "法网狙击[粤]", "刀马旦95版", "诛寇行动", "网虫日记new", "爱回家第十一部", "老表，你好野！", "大地", "要帅气的生活[韩]", "范府大院", "你睡觉的时候[韩]", "落跑甜心", "傻瓜妈妈[韩]", "冲上云霄new", "爱在日落之前", "狐步谍影", "初五启市录[粤]", "幽灵[韩]", "无赖汉[韩]"]},
	// 				6:{'Unique Prog Names':["非常24小时", "终极一班II", "樱野3加1", "射向星星", "老表，你好野！[粤]", "玉观音", "心路GPS[粤]", "隋唐英雄下部", "幸运草[韩]", "代号十三钗", "只有你[韩]", "平原烽火", "刀马旦95版", "独生子女的婆婆妈妈", "恋爱季节[粤]", "天子寻龙", "拿什么拯救你我的爱人", "新四大名捕", "楚汉传奇", "双人房单人床", "致命名单", "一米阳光", "爱回家第九部", "迷离档案[粤]", "智勇新警界", "太空堡垒卡拉狄加第四季[英]", "追击者[韩]", "漂亮主妇new", "诉讼双雄第一季[英]", "美丽在望", "法网狙击[粤]", "幸福摩天轮[粤]", "诛寇行动", "神秘博士第三季[英]", "恋爱季节", "隋唐英雄", "宝贝战争", "老表，你好野！", "大地", "要帅气的生活[韩]", "范府大院", "你睡觉的时候[韩]", "新红楼梦", "傻瓜妈妈[韩]", "法网狙击", "幸福摩天轮", "爱在日落之前", "爱回家第十部", "心路GPS", "初五启市录", "初五启市录[粤]", "无赖汉[韩]"]},
	// 				7:{'Unique Prog Names':["福气又安康", "非常24小时", "终极一班II", "平原烽火", "射向星星", "楚汉传奇", "玉观音", "我的极品老妈", "隋唐英雄下部", "乡村爱情变奏曲", "代号十三钗", "石榴红了", "只有你[韩]", "爱情自有天意new", "樱野3加1", "刀马旦95版", "独生子女的婆婆妈妈", "小儿难养", "闯关东Ⅱnew", "扇娘", "我家的天使", "拿什么拯救你我的爱人", "倾城绝恋new", "新四大名捕", "江湖兄弟", "蝾螈道士和影子操作团[韩]", "一米阳光", "神秘博士第二季[英]", "迷离档案[粤]", "智勇新警界", "太空堡垒卡拉狄加第四季[英]", "天真遇到现实", "美丽在望", "追击者[韩]", "幸运草[韩]", "诛寇行动", "神秘博士第三季[英]", "隋唐英雄", "造王者new", "大地", "要帅气的生活[韩]", "范府大院", "你睡觉的时候[韩]", "落跑甜心", "少林寺传奇3", "傻瓜妈妈[韩]", "幸福摩天轮", "爱在日落之前", "狐步谍影", "天子寻龙", "幽灵[韩]", "嫁入豪门", "无赖汉[韩]"]},
	// 				8:{'Unique Prog Names':["终极一班II", "楚汉传奇", "我们的快乐人生new", "我的极品老妈", "乡村爱情变奏曲", "石榴红了", "致命名单", "幸福摩天轮[粤]", "独生子女的婆婆妈妈", "恋爱季节[粤]", "小儿难养", "扇娘", "新四大名捕", "老表，你好野！[粤]", "凤凰牡丹", "漂亮主妇new", "一米阳光", "爱回家第九部", "射向星星", "利箭行动", "玉观音", "天真遇到现实", "美丽在望", "法网狙击[粤]", "神秘博士第三季[英]", "华丽一族", "恋爱季节", "隋唐英雄", "爱回家第十一部", "终极一班IInew", "倾城绝恋new", "爱情自有天意", "你睡觉的时候[韩]", "新红楼梦", "法网狙击", "幸福摩天轮", "爱回家第十部", "心路GPS", "初五启市录", "初五启市录[粤]", "劝和小组", "嫁入豪门"]},
	// 				9:{'Unique Prog Names':["福气又安康", "非常24小时", "终极一班II", "樱野3加1", "玉观音", "隋唐英雄下部", "少林寺传奇3", "代号十三钗", "神秘博士第二季[英]", "小儿难养", "闯关东Ⅱnew", "我家的天使", "蝾螈道士和影子操作团[韩]", "一米阳光", "迷离档案[粤]", "狐步谍影", "平原烽火", "太空堡垒卡拉狄加第四季[英]", "想你[韩]", "诉讼双雄第一季[英]", "美丽在望", "追击者[韩]", "名声大噪第一季[英]New", "诛寇行动", "宝贝战争", "败犬女王newnew", "要帅气的生活[韩]", "范府大院", "你睡觉的时候[韩]", "落跑甜心", "新红楼梦", "傻瓜妈妈[韩]", "爱在日落之前", "楚汉传奇new", "智勇新警界", "幽灵[韩]", "无赖汉[韩]"]},
	// 				}
	// }
	// callback(data);
}
function fetchExperimentInfoOf_(expid, callback) {
	$.ajax({
		type: 'POST',
		url: '/expInfo',
		data: {'expId':expid},
		success: callback, // function ( data, textStatus, jqXHR )
		error: function( jqXHR, textStatus, errorThrown ) {
			alert(textStatus + errorThrown);
		}
	});

	/*** debug mode ***/
	// var origData = {'20130915001': {'expId':'20130915001', 'type':'cluster', 'description':'The first cluster experiment.', 'numCluster':10, 'simMetric':'KSC', 'vecLen':'90'},
	// 				'20130915002': {'expId':'20130915002', 'type':'cluster', 'description':'This experiment has not been done yet.', 'numCluster':10, 'simMetric':'KSC', 'vecLen':'14'}
	// 				};
	// callback( origData[expid] );
	
}
function fetchAllExperimentIds(callback) {
	$.ajax({
		type: 'POST',
		url: '/expList',
		data: {'type':'cluster'},
		success: callback,//function(){console.log('success!')},//callback(), //function ( data, textStatus, jqXHR ) 
		error: function( jqXHR, textStatus, errorThrown ) {
			alert(textStatus + errorThrown);
		}
	});

	/*** debug mode ***/
	// var data = ['20130915001','20130915002'];
	// callback(data);
}

function controlPanel(jqId, expResult) {
	this.init = function () {
		this.$controlPanel = $(jqId);
		this.$progList = $('#cpProgList');
		this.infoList = expResult;
		this.CONST_PAGE_SIZE = 10;
		this.selectedProgids = [];

		this.eventBinding();

		$('#cpChangeCluster').click();
	}
	this.addRemoveClicked = function(event) {
		function addId(jqid, progid) {
			var cp = event.data.controlPanelObj;
			if (progid in cp.selectedProgids)
				return;
			cp.selectedProgids.push(progid);
			var strToAdd = String(progid);
			// if ( $(jqid).val()[$(jqid).val().length-1] != ' ')
			strToAdd += ' '
			$(jqid).val( $(jqid).val() + strToAdd );
		}
		function removeId(jqid, progid) {
			var cp = event.data.controlPanelObj;
			while (progid in cp.selectedProgids) {
				cp.selectedProgids.splice(cp.selectedProgids.indexOf(progid))
			}
			var origIds = $(jqid).val()
			var index = origIds.indexOf(progid)
			if (index != -1) {
				origIds = origIds.slice(0,index) + origIds.slice(index + String(progid).length + 1);
			}
			$(jqid).val(origIds);
		}
		function getProgId(obj) { // Return a string of progid
			var clusterId = parseInt( $('#cpClusterId').val() );
			var pageId = parseInt( $('#cpPageId').val() );
			var $listedProgs = $('#cpProgList').find('.cpListItem');
			// 10 prog on every page
			// var i = 0;
			// for (i=0; i<$listedProgs.length; i++) {
			// 	if ($listedProgs[i] == obj)
			// 		break;
			// }
			// if ($listedProgs.length === i) {
			// 	console.log('No matched item found!');
			// 	return 'not found';
			// }
			var idOfObj = $(obj).parent().parent().attr('id');
			var re = new RegExp('[0-9]');
			var start = idOfObj.search(re);
			var i = parseInt( idOfObj.slice(start) );
			var index = event.data.controlPanelObj.CONST_PAGE_SIZE * (parseInt(pageId)-1) + i ;
			return expResult.clusteredIds[parseInt(clusterId)][index];
		}
		// Change the visible button
		obj = event.target;
		$(obj).parent().find('.hide').removeClass('hide');
		$(obj).addClass('hide');
		// Add/Remove the progid in input box
		if ($(obj).html() == 'Add') {
			addId('#searchBox', getProgId(obj));
		}
		else {
			removeId('#searchBox', getProgId(obj));
		}

	}
	this.eventBinding = function() {
		// Add/Remove buttons' click event
		this.$progList.find('.btn').click({'controlPanelObj':this}, this.addRemoveClicked);

		// Cluster change button
		pager = this.$controlPanel.find('.pager').first().html()
		this.$controlPanel.find('.pager').first().html('')
		this.$controlPanel.find('.pager').first().html(pager)

		$('#cpChangeCluster').click( {'controlPanelObj':this, 'isClusterChanged':true}, this.fetchProgInfoInCluster_Page_TriggerredByEvent_ );
		$('#cpChangePage').click( {'controlPanelObj':this, 'isClusterChanged':false}, this.fetchProgInfoInCluster_Page_TriggerredByEvent_ );
		$('#cpClusterId').bind('keyup', function(event) {
			if (event.keyCode == "13") {
				$('#cpChangeCluster').click();
			}
		});
		$('#cpPageId').bind('keyup', function(event) {
			if (event.keyCode == "13") {
				$('#cpChangePage').click();
			}
		});
		$('#cpNext').click(function(){
			if ( $('#cpNext').hasClass('disabled') )
				return;
			var currentPage = parseInt($('#cpPageId').val());
			$('#cpPageId').val(currentPage+1);
			$('#cpChangePage').click();
		})
		$('#cpPrevious').click(function(){
			if ( $('#cpPrevious').hasClass('disabled') )
				return;
			var currentPage = parseInt($('#cpPageId').val());
			$('#cpPageId').val(currentPage-1);
			$('#cpChangePage').click();
		})
		$('#cpAddAll').click(function(){
			$('.cpListItem').find('.btn-primary').click();
			// $('#cpAddAll').addClass('hide');
			// $('#cpRemoveAll').removeClass('hide');
		})
		$('#cpRemoveAll').click(function(){
			$('.cpListItem').find('.btn-danger').click();
			// $('#cpAddAll').removeClass('hide');
			// $('#cpRemoveAll').addClass('hide');
		})
	}
	this.emptyProgList = function() {
		$('#cpProgList').empty();
	}
	// this.showProgFrom_To_InCluster_ = function (start, stop, clusterIndex) { //Stop at the element before index stop
	// 	var clusterId = $('#cpClusterId').val();
	// 	var pageId = $('#cpPageId').val();
	// 	var $listedProgs = $('#cpProgList').find('.cpListItem');
	// 	for (var i=start; i<stop || i<expResult.clusteredIds[clusterIndex].length; i++) {

	// 	}
	// }

	this.setSelectedProgids = function (str) {
		if (str.indexOf(',') != -1)
			var splitedStr = str.split(',');
		else
			var splitedStr = str.split(' ');
		while ( splitedStr.indexOf('') != -1 ) {
			var index = splitedStr.indexOf('');
			splitedStr.splice(index,index+1);
		}
		this.selectedProgids = [];
		for (var i=0; i<splitedStr.length; i++) {
			this.selectedProgids.push(splitedStr[i]);
		}
	}
	this.makeThumbNail = function (oneProgInfo, index) { // return an html string
		var result = '';
		result += oneProgInfo.progname.HCwrapWith('h5');
		result += ('progid:'.HCwrapWith('strong') + String(oneProgInfo.progid) + '<br>' + 'type:'.HCwrapWith('strong') + oneProgInfo['type']).HCwrapWith('p');
		// Check whether in selectedProgids or not
		var strProgid = String(oneProgInfo.progid);
		if (this.selectedProgids.indexOf(strProgid) == -1) { // Not exists
			result += ( 'Add'.HCwrapWith('a', {'class':'btn btn-primary'}) + 'Remove'.HCwrapWith('a',{'class':'btn btn-danger hide'}) ).HCwrapWith('p');
		}
		else {
			result += ( 'Add'.HCwrapWith('a', {'class':'btn btn-primary hide'}) + 'Remove'.HCwrapWith('a',{'class':'btn btn-danger'}) ).HCwrapWith('p');
		}
		result = result.HCwrapWith('li', {'class': 'span2 cpListItem', 'id': 'cpListItem'+index});
		
		return result;
	}
	this.makeThumbNails = function (data, clusterIndex, maxPageNum) {
		// var maxPageNum = Math.ceil( this.infoList.clusteredIds[clusterIndex].length/this.CONST_PAGE_SIZE );
		this.setSelectedProgids( $('#searchBox').val() );
		var htmlContent = '';
		for (var i=0; i<data.length; i++) {
			htmlContent += this.makeThumbNail(data[i], i);
		}
		this.emptyProgList();
		this.$progList.append( htmlContent );
		//Change the total page num
		$('#totalPages').html( '/ ' + String(maxPageNum) );
		//Change the status of '#cpPrevious' and '#cpNext'
		var iCurrentPage = parseInt( $('#cpPageId').val() );
		var iTotalPage = parseInt( $('#totalPages').html().split(' ')[1] );
		$('#cpPrevious').removeClass('disabled');
		$('#cpNext').removeClass('disabled');
		if (iCurrentPage == iTotalPage){
			$('#cpNext').addClass('disabled');
		}
		if (iCurrentPage == 1 ) {
			$('#cpPrevious').addClass('disabled');
		}
			
		// Add/Remove buttons' click event
		this.$progList.find('.btn').click({'controlPanelObj':this}, this.addRemoveClicked);
	}
	this.fetchProgInfoInCluster_Page_TriggerredByEvent_ = function (event) { 
	// cluster start from 0, page start from 1
		var clusterIndex = parseInt( $('#cpClusterId').val() );
		var isClusterChanged = event.data.isClusterChanged;
		var pageIndex = parseInt( $('#cpPageId').val() );
		var cp = event.data.controlPanelObj;

		// If cluster changed set page index back to 1
		if (isClusterChanged) {
			pageIndex = 1;
			$('#cpPageId').val('1');
		}

		// Check whether the page id has exceed the max page num
		var maxPageNum = Math.ceil( cp.infoList.clusteredIds[clusterIndex].length/cp.CONST_PAGE_SIZE );
		if (pageIndex　> maxPageNum) {
			pageIndex = maxPageNum;
			$('#cpPageId').val('1');
		}

		var start = (pageIndex-1) * cp.CONST_PAGE_SIZE;
		var stop = start + cp.CONST_PAGE_SIZE;
		var ids = {'data': cp.infoList.clusteredIds[clusterIndex].slice(start, stop)};

		$.ajax({
			type: 'POST',
			url: '/prog',
			data: ids,
			success: function( data, textStatus, jqXHR) {
				$('#alerts').html('<div class="alert fade in"><button type="button" class="close" data-dismiss="alert">×</button>Prog names fetch finished!</div>')
				var reorderedData = [];
				for (var i=0; i<data.length; i++){
					reorderedData[cp.infoList.clusteredIds[clusterIndex].indexOf(data[i].progid)-start] = data[i];
				}
				
				cp.makeThumbNails(reorderedData, clusterIndex, maxPageNum);
			},
			error: function( jqXHR, textStatus, errorThrown ) {
				alert(textStatus + errorThrown);
			}
		})
	}

	this.init();
}
function clusterInfo(jqId, expResult) {
	this.init = function () {
		this.$clusterInfoList = $(jqId);
		this.expResult = expResult;

		var clusterNum = Object.keys( expResult.clusterInfo[Object.keys(expResult.clusterInfo)[0]] ).length;
		this.emptyClusterInfoList();
		this.fillAllClusterInfo( clusterNum, Object.keys(expResult.clusterInfo) );
	}
	this._appendClusterInfo = function(clusterIndex, infoNameList) {
		// <dt> and <dd> part
		var htmlContent = 'Cluster Index'.HCwrapWith('dt') + String(clusterIndex).HCwrapWith('dd');
		for (var infoKey in infoNameList) {
			var infoName = infoNameList[infoKey];
			var info = this.expResult.clusterInfo[infoName][clusterIndex];
			htmlContent += String(infoName).HCwrapWith('dt');
			htmlContent += info.join(' | ').HCwrapWith('dd');
		}
		
		// <dl> and <div> part
		htmlContent = htmlContent.HCwrapWith('dl', {'id':'clusterInfo'+clusterIndex, 'class':'clusterInfo dl-horizontal'});
		htmlContent = htmlContent.HCwrapWith('div', {'id':'clusterInfoWrapper'+clusterIndex, 'class':'well clusterInfoWrapper'});

		this.$clusterInfoList.append(htmlContent);
	}
	this.fillAllClusterInfo = function(clusterNum, infoNameList) {
		this.emptyClusterInfoList();
		for (var i = 0; i < clusterNum; i++) {
			this._appendClusterInfo(i, infoNameList);
		}
	}
	this.emptyClusterInfoList = function() {
		this.$clusterInfoList.empty();
	}

	this.init();
}

$(function(){
	/*** Declaration of binding events ***/
	function setSortable() {
		$("#clusterInfoList").sortable();
		$("#clusterInfoList").disableSelection();
	}
	/*** End of Declaration ***/
	setSortable();
	fetchAllExperimentIds(function(data){
		var htmlContent = '';
		for (var key in data) {
			htmlContent += String(data[key].expId).HCwrapWith('option',{'value': data[key].expId});
		}
		$('#expId').html(htmlContent);
		$('#expId').change();
	})
	// <dl id="expInfo" class="dl-horizontal expInfo span8">
	// 	<dt>Experiment ID</dt> 
	// 	<dd>20130915001</dd>
	// 	<dt>Type</dt> <dd>Cluster</dd>
	// 	<dt>Num of cluster</dt> <dd>10</dd>
	// 	<dt>Similarity metric</dt> <dd>KSC</dd>
	// 	<dt>Vector length</dt> <dd>90</dd>
	// </dl>
	$('#expId').change(function(data){
		fetchExperimentInfoOf_($('#expId').val(), function(data){
			$('#alerts').html('<div class="alert fade in"><button type="button" class="close" data-dismiss="alert">×</button>Result fetch finished!</div>');
			var htmlContent = '';
			for (var key in data) {
				htmlContent += String(key).HCwrapWith('dt') + String(data[key]).HCwrapWith('dd');
			}
			$('#expInfo').html(htmlContent);

			fetchExperimentResultOf_($('#expId').val(), function(data){
				GLOBAL_CONTROL_PANEL = new controlPanel('#controlPanel', data);
				GLOBAL_CLUSTER_INFO = new clusterInfo('#clusterInfoList', data);
			})
		})
	})
	
	// fetchExperimentResultOf_('20130915001', function(data){
	// 	GLOBAL_CONTROL_PANEL = new controlPanel('#controlPanel', data);
	// 	GLOBAL_CLUSTER_INFO = new clusterInfo('#clusterInfoList', data);
	// })
	$('#searchBox').change(function(){
		GLOBAL_CONTROL_PANEL.setSelectedProgids($('#searchBox').val());
		$('#cpChangePage').click();
	})
})